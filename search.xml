<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kafka  原理学习</title>
      <link href="2021/01/09/Kafka-%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/01/09/Kafka-%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。是一个分布式、分区的、多副本的、多订阅者，基于zookeeper协调的分布式的，发布订阅模式消息处理系统（也可以当做日志系统），常见可以用于web/nginx日志、访问日志，消息服务、流转处理等。<br>主要应用场景是：日志收集系统和消息系统。<br>Kafka主要设计目标如下：</p><ul><li>以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间的访问性能。</li><li>高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条消息的传输。</li><li>支持Kafka Server间的消息分区，及分布式消费，同时保证每个partition内的消息顺序传输。</li><li>同时支持离线数据处理和实时数据处理。</li><li>Scale out支持在线水平扩展</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><p>解耦<br>在项目启动之初来预测将来项目会碰到什么需求，是极其困难的。消息队列在处理过程中间插入了一个隐含的、基于数据的<strong>接口层</strong>，两边的处理过程都要实现这一接口。这允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</p></li><li><p>冗余<br>有些情况下，处理数据的过程会失败。除非<strong>数据被持久化</strong>，否则将造成丢失。Kafka把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。其他的许多消息队列多采用”插入-获取-删除”方式，不能保证数据处理失败场景中，再次找到并重新处理该数据。</p></li><li><p>扩展性<br>因为消息队列解耦了你的处理过程，所以增大消息入队和处理的数据量是很容易的；只要另外增加处理过程即可。不需要改变代码、不需要调节参数。扩展就像调大电力按钮一样简单。</p></li><li><p>灵活性 &amp; 峰值处理能力<br>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见；如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。</p></li><li><p>可恢复性<br>当体系的一部分组件失效，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。这种允许重试或者延后处理请求的能力是Kafka与其他系统的区别。</p></li><li><p>送达保证<br>其他的部分消息系统提供了一个”只送达一次”保证。无论有多少进程在从队列中领取数据，每一个消息只能被处理一次。Kafka提供的冗余机制保证了消息能被实际的处理。是因为获取一个消息只是”预定”了这个消息，暂时把它移出了队列。除非客户端明确的表示已经处理完了这个消息，否则这个消息会被放回队列中去，在一段可配置的时间之后可再次被处理。</p></li><li><p>顺序保证<br>在大多使用场景下，数据处理的顺序都很重要。消息队列本来就是排序的，并且能保证数据会按照特定的顺序来处理。部分消息系统保证消息通过FIFO（先进先出）的顺序来处理，因此消息在队列中的位置就是从队列中检索他们的位置。</p></li><li><p>缓冲<br>在任何重要的系统中，都会有需要不同的处理时间的元素。例如,加载一张图片比应用过滤器花费更少的时间。消息队列通过一个缓冲层来帮助任务最高效率的执行–写入队列的处理会尽可能的快速，而不受从队列读的预备处理的约束。该缓冲有助于控制和优化数据流经过系统的速度。</p></li><li><p>理解数据流<br>在一个分布式系统里，要得到一个关于用户操作会用多长时间及其原因的总体印象，是个巨大的挑战。消息队列通过消息被处理的频率，来辅助识别那些表现不佳的处理过程或领域，这些地方的数据流不是最优的。</p></li><li><p>异步通信<br>很多时候，你不想也不需要立即处理消息。消息队列提供了异步处理机制，允许你把一个消息放入队列，但并不立即处理它。你想向队列中放入多少消息就放多少，然后在你乐意的时候再去处理它们。</p></li></ol><h3 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h3><table><thead><tr><th align="left">名词</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">Producer</td><td align="left">生产者，负责发布消息到broker的客户端。</td></tr><tr><td align="left">Consumer</td><td align="left">消费者，从broker读取消息的客户端。</td></tr><tr><td align="left">Topic</td><td align="left">Kafka对消息进行归类，生产者发送到集群的每一条消息都要指定一个topic。</td></tr><tr><td align="left">Broker</td><td align="left">一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。</td></tr><tr><td align="left">Partition</td><td align="left">为了实现扩展性，一个非常大的topic可以分布到多个broker（即服务器）上，一个topic可以分为多个partition，每个partition是一个有序的队列。partition中的每条消息都会被分配一个有序的id（offset）。kafka只保证按一个partition中的顺序将消息发给consumer，不保证一个topic的整体（多个partition间）的顺序</td></tr><tr><td align="left">ConsumerGroup</td><td align="left">每个consumer属于一个特定的consumer group，一条消息可以发送到不同的consumer group，但一个consumer group中只能有一个consumer能消费这条消息。通过consumer group机制，kafka可以实现一个topic消息的广播（发给所有的consumer）和单播（发给任意一个consumer）的实现。</td></tr><tr><td align="left">Offset</td><td align="left">kafka的存储文件都是按照offset.kafka来命名，用offset做名字的好处是方便查找。例如你想找位于2049的位置，只要找到2048.kafka的文件即可。当然the first offset就是00000000000.kafka。</td></tr></tbody></table><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img src="/images/articleimg/kafka%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="架构"><br>如上图所示，一个典型的Kafka集群中包含若干Producer（可以是web前端产生的Page View，或者是服务器日志，系统CPU、Memory等），若干broker（Kafka支持水平扩展，一般broker数量越多，集群吞吐率越高），若干Consumer Group，以及一个Zookeeper集群。Kafka通过Zookeeper管理集群配置，选举leader，以及在Consumer Group发生变化时进行rebalance。Producer使用push模式将消息发布到broker，Consumer使用pull模式从broker订阅并消费消息。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p>消息通信框架：<br>用途：负责数据在不同应用间的发送，应用层只需要聚焦于数据，无需关注数据在多个应用间的传递过程。<br>类型：</p><ul><li>点对点模式：消息被发送到一个队列中。可能有一个或多个消费者处理队列中数据，但数据被消费一次后，就从队列中删除，生产者发送一条消息到队列，只有一个消费者能收到。</li><li>发布-订阅模式：消息被发送到一个topic。消息的生产者称为发布者，消费者称为订阅者。发布者发送到topic的消息，只有订阅了topic的订阅者才会收到消息。订阅者可以订阅一个或多个topic，订阅者可以消费该topic中所有的数据，同一条数据可以被多个订阅者消费，数据被消费后不会立马删除。</li></ul></li><li><p>为什么说kafka是分布式模型呢？<br>首先，同一个kafka集群有共同拥有一个topic, 而同一个topic又拥有不同的分区，不同的分区可以分布在不同的borker上也就是不同的机子上，由于分区是分布式的，那么数据也是分布式存储了。<br>还有消费者也是分布式的，比如，消费者组里的消费者可以在不同的机器上，有什么好处？消费的方式可以是存储可以是计算，如果是放在一台机子上，Io等压力很大。<br>kafka上面的所有想到的角色都是分布式的，不管是消费者还是生产者还是分区，他们之间沟通的唯一桥梁就是zookeeper。这样看来，Kafka就是分布式模型了。</p></li></ul><p>链接：<br>Kafka官网：<a href="http://kafka.apache.org/">http://kafka.apache.org/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Kafka </tag>
            
            <tag> 开源软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github + Hexo Website Creation Guide</title>
      <link href="2021/01/02/github-and-hexo-website-create/"/>
      <url>2021/01/02/github-and-hexo-website-create/</url>
      
        <content type="html"><![CDATA[<p><strong>页内导航</strong></p><ul><li>搭建 Node.js 环境</li><li>安装配置 Hexo</li><li>GitHub 注册和配置GitHub Pages</li><li>搭建 Git 环境</li><li>配置 Git 个人信息</li><li>关联 Hexo 与 GitHub</li><li>获得个人网站域名</li><li>GitHub Pages 地址绑定个人域名</li><li>小知识++<a id="more"></a></li></ul><h3 id="搭建-Node-js-环境"><a href="#搭建-Node-js-环境" class="headerlink" title="搭建 Node.js 环境"></a>搭建 Node.js 环境</h3><p>为什么要搭建 Node.js 环境？<br>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。 Hexo 博客系统是基于 Node.js 编写的。<br>在 Node.js 官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a> 下载并安装，然后打开命令提示符，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>出现版本号则说明 Node.js 环境配置成功。</p><h3 id="安装配置-Hexo"><a href="#安装配置-Hexo" class="headerlink" title="安装配置 Hexo"></a>安装配置 Hexo</h3><p>Hexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>Hexo 的官方文档：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> （强烈推荐看一看）<br>安装Hexo，中途看到WARN不用担心，不会影响正常使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>查看版本号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><p>安装 Hexo 完成后，请执行下列命令来初始化 Hexo，用户名改成你的，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog.github.io</span><br><span class="line"><span class="built_in">cd</span> myblog.github.io</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy         <span class="comment">#需要部署的文件</span></span><br><span class="line">├── node_modules    <span class="comment">#Hexo插件</span></span><br><span class="line">├── public          <span class="comment">#生成的静态网页文件</span></span><br><span class="line">├── scaffolds       <span class="comment">#模板</span></span><br><span class="line">├── <span class="built_in">source</span>          <span class="comment">#博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</span></span><br><span class="line">| ├── _drafts       <span class="comment">#草稿</span></span><br><span class="line">| └── _posts        <span class="comment">#文章</span></span><br><span class="line">├── themes          <span class="comment">#主题</span></span><br><span class="line">├── _config.yml     <span class="comment">#全局配置文件</span></span><br><span class="line">└── package.json    <span class="comment">#npm 依赖等</span></span><br></pre></td></tr></table></figure><p>运行本地 Hexo 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>网站会在 <a href="http://localhost:4000/">http://localhost:4000</a> 下启动。如果 <a href="http://localhost:4000/">http://localhost:4000</a> 能够正常访问，则说明 Hexo 本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。</p><h3 id="GitHub-注册和配置-GitHub-Pages"><a href="#GitHub-注册和配置-GitHub-Pages" class="headerlink" title="GitHub 注册和配置 GitHub Pages"></a>GitHub 注册和配置 GitHub Pages</h3><p>Github官网：<a href="https://github.com/">https://github.com/</a> 注册账号<br>网站右上角+号 -&gt; New Repositories创建新项目 -&gt; Repositories name: yourname.github.io。yourname为你的github用户名，访问yourname.github.io正常说明github Pages配置成功。</p><h3 id="搭建-Git-环境"><a href="#搭建-Git-环境" class="headerlink" title="搭建 Git 环境"></a>搭建 Git 环境</h3><p>在 Git 官网：<a href="https://git-scm.com/">https://git-scm.com/</a> 下载并安装，桌面右键，打开 Git Bush Here，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>出现版本号则说明 Git 环境配置成功。</p><h3 id="配置-Git-个人信息"><a href="#配置-Git-个人信息" class="headerlink" title="配置 Git 个人信息"></a>配置 Git 个人信息</h3><p>Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourgithubname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;yourregedmail@gmail.com&quot;</span></span><br></pre></td></tr></table></figure><p>为了免于多次提交重复输入账户密码，配置如下信息，store永久保存密码，建议个人电脑；cache为临时保存账户信息，建议公共电脑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br><span class="line">or</span><br><span class="line">git config --global credential.helper cache</span><br></pre></td></tr></table></figure><p>查看配置内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><p>生成ssh秘钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>输出公钥，并拷贝的剪切板：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>GitHub -&gt; Setting -&gt; SSH and GPC keys -&gt; SSH keys -&gt; New SSH key -&gt; 将刚刚拷贝的公钥内容黏贴进去 -&gt; Add SSH key。<br>然后在Git Bash中检测GitHub公钥设置是否成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure><p>返回如下信息即成功配置秘钥，You’ve successfully authenticated.<br>这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p><h3 id="关联-Hexo-与-Github"><a href="#关联-Hexo-与-Github" class="headerlink" title="关联 Hexo 与 Github"></a>关联 Hexo 与 Github</h3><p>打开刚刚生成站点目录，第一级目录中有配置文件_config.yml，修改如下条目并保存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    repo: https://github.com/youname.github.io.git GitHub上新仓库的路径</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>这时，我们分别输入三条命令，清除历史内容，生成新页面，部署网站：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这时你的博客已经上线了，可以在公网上通过youname.github.io访问了。</p><h3 id="获得个人网站域名"><a href="#获得个人网站域名" class="headerlink" title="获得个人网站域名"></a>获得个人网站域名</h3><p>域名是网站的入口，也是网站的第一印象，比如饿了么的官网的域名是：<a href="https://www.ele.me/">https://www.ele.me/</a> ，很是巧妙。常见的有com,cn,net,org等后缀，也有小众的xyz,me,io等后缀，根据你自己的喜好，选择不同的后缀，建议选择常见的后缀，网站的搜索优化也较为友好。另外很多小众奇特的后缀在国内是没办法备案的，网站也就无法上线，该信息根据各省情况不同，如果需要的话可以进一步查询。</p><p>申请域名的地方有很多，比如NameSilo、西部数据、阿里云、腾讯云等，这里推荐阿里云：<a href="https://wanwang.aliyun.com/domain/">https://wanwang.aliyun.com/domain/</a> 。如果你已经有了空闲域名就无需购买，直接使用即可。<br>新申请的域名需要实名认证后才能正常解析，提交申请后预计1-3天就ok。</p><h3 id="GitHub-Pages-地址绑定个人域名"><a href="#GitHub-Pages-地址绑定个人域名" class="headerlink" title="GitHub Pages 地址绑定个人域名"></a>GitHub Pages 地址绑定个人域名</h3><p>Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io 或者自定义域名来发布站点。<br>github.io为自己站点的二级域名，该域名在百度等搜索引擎收录权重较低，也为了有自己独立的站点，因此将博客绑定到自己的域名。</p><h5 id="阿里云操作："><a href="#阿里云操作：" class="headerlink" title="阿里云操作："></a>阿里云操作：</h5><p>登陆阿里云，进入管理控制台的域名列表，找到你的域名，添加如下2条解析：<br>CNAME类型：记录类型选择CNAME -&gt; 主机记录填www -&gt; 解析线路选择默认 -&gt; 记录值填yourname.github.io -&gt; TTL值为10分钟<br>A类型：再添加一个解析，记录类型A -&gt; 主机记录填www -&gt; 解析线路选择默认 -&gt; 记录值填你GitHub 的ip地址（在cmd中ping：） -&gt; ping youname.github.io</p><h5 id="GitHub操作："><a href="#GitHub操作：" class="headerlink" title="GitHub操作："></a>GitHub操作：</h5><p>项目主页 -&gt; Settings-&gt;GitHub Pages -&gt; Source Branch:修改为master  -&gt; Custom domain:修改自己的域名，例如hexo.com<br>由于Hexo重新部署时会冲掉远端仓库配置的CNAME，解决方法是在本地的source目录下新建CNAME文件，填入hexo.com ，这样每次推送更新时，不需要登陆GitHub页面更新域名。<br>点击保存，等待10分钟后就可以使用自定义的域名，访问网站测试，正常访问即表示域名解析成功了。</p><h3 id="小知识"><a href="#小知识" class="headerlink" title="小知识++"></a>小知识++</h3><h5 id="更改GitHub默认显示分支："><a href="#更改GitHub默认显示分支：" class="headerlink" title="更改GitHub默认显示分支："></a>更改GitHub默认显示分支：</h5><p>当前GitHub默认分支为main，更改为常见的master。<br>项目主页-&gt; Settings-&gt;Branches-&gt;Default branch:修改为master</p><h5 id="butterfly-Hexo主题："><a href="#butterfly-Hexo主题：" class="headerlink" title="butterfly Hexo主题："></a>butterfly Hexo主题：</h5><p>源码：<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a><br>指导手册：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a><br>作者博客：<a href="https://jerryc.me/">https://jerryc.me/</a><br>博客：<a href="http://www.rwyqboy.top/">http://www.rwyqboy.top/</a><br>站点美化：<a href="https://butterfly.lete114.top/article/Butterfly-config.html">Lete乐特</a>; <a href="https://www.antmoe.com/posts/a811d614/index.html">小康</a>; <a href="https://akilar.top/posts/7c16c4bb/">Hexo日记</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo - Quick Start Guide</title>
      <link href="2021/01/01/hello-world/"/>
      <url>2021/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">or</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">or</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">or</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello, Selina~</title>
      <link href="2021/01/01/Hello-Selina/"/>
      <url>2021/01/01/Hello-Selina/</url>
      
        <content type="html"><![CDATA[<p><strong>Hi, happy new year, welcome to the cosmos!</strong></p><p>​    – The first words of this world.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hello </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
